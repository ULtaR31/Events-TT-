
 1. Реализация страницы аутентификации/регистрации пользователей; - done
 2. Реализация страницы отображения списка событий. Если все места на
 событие уже заняты, отображать информацию о том, что свободных мест
 нет;  - done
 3. Реализация страницы с подробной информацией о событии; - done
 4. Реализация страницы регистрации на событие; - done
 5. Реализация страницы для просмотра событий, участником которых
 пользователь является; - done
 6. Реализация пагинации, поиска по названию/дате события, фильтрации по
 категории/месту проведения;
    7. Для пользователей, обладающих правами администратора, должен быть
  предусмотрен раздел для управления списком событий, где они могут
  создавать, редактировать и удалять события.
  
  
  
  //Подправить профайлы Automapper
  // Вынести классы DTO, Request, Response в соответствующий слой
  // Использовать кастомные исключения (NotFound, BadRequest, AlreadyExists и т.д.)
  // Вынести валидацию входных данных из сервисов и использовать FluentValidation
  // Обрабатывать исключения с помощью конструкции throw в блоке catch
  // Перенести интерфейсы репозиториев на слой Domain
  // Не генерировать Id вручную, пусть Ef Core автоматически создает уникальные Id
  // Вынести конфигурацию сущностей в отдельный файл
  // Убрать проверки из репозиториев и контроллеров, оставить их на слое Application
  // Использовать маппер при обновлении сущностей
  // Не вызывать метод SaveChangesAsync() дополнительно в методах репозитория
  // Обрабатывать не только 500 код ошибки в глобальном обработчике исключений
  // Создать API как asp net web api и запускать приложение через этот проект
  
 
  Профайлы Automapper не должен находиться в Domain.
  Классы DTO, Request, Response вынеси в соответствующий слой.
  Используй кастомные исключения: NotFound, BadRequest, AlreadyExists и т.д.
  Валидацию входных даnopmнных в сервисы вынеси из сервиса и используй FluentValidation (EventService).
  Если ловишь исключение в try/catch вне мидлвейр - используй конструкцию throw в блоке catch (JWT Sercice: GetTokenPrincipal).
  Интерфейсы репозиториев перенеси на слой Domain.
  Не генерируй сам значение Id. Ef core автоматически сгенерирует уникальное Id при вставке в БД.
  Вынеси конфигурацию сущностей в отдельный файл.
  Убери проверки из репозиториев и контроллеров, все проверки должны быть на слое Application.
   При обновлении сущностей используй маппер.
  Метод SaveChangesAsync() реализован в UOF, зачем дополнительно вызывать его в методах репозитория?
  В глобальном обработчике исключений обрабатывай не только 500 код ошибки.
  Создай API не как библиотеку классов, а как asp net web api. И запускай приложение через этот проект.